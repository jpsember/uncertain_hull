package uhull;

import java.awt.*;
import java.util.*;
import base.*;
import testbed.*;

public class GuarHullOper implements TestBedOperation, Globals {
  /*! .enum  .private 4150
          plotsimp compare  bitan printenv _ _ upperonly
  */

    private static final int PLOTSIMP         = 4150;//!
    private static final int COMPARE          = 4151;//!
    private static final int BITAN            = 4152;//!
    private static final int PRINTENV         = 4153;//!
    private static final int UPPERONLY        = 4156;//!
/*!*/

  public void addControls() {
    C.sOpenTab("GHull");
    C.sStaticText("Constructs guaranteed convex hull of uncertain discs,"
        + " in O(n lg n) time, using simple, nonnumeric algorithm");

    C.sCheckBox(BITAN, "plot bitangents", null, false);
    {
      C.sOpen();
      C.sCheckBox(UPPERONLY, "upper only", "Construct only the upper hull",
          false);
      C.sClose();
      C.sCheckBox(PRINTENV, "print env", "Display upper envelope as string",
          false);
    }
    {
      C.sOpen();
      C.sCheckBox(PLOTSIMP, "simple",
          "Plot guaranteed hull, for testing purposes, "
              + "using simple, robust algorithm", false);
      C.sNewColumn();
      C.sCheckBox(COMPARE, "verify", "Verify that generated hull "
          + "matches the simple, slow algorithm's output", false);
      C.sClose();
    }

    C.sCloseTab();
  }

  public static GuarHullOper singleton = new GuarHullOper();

  private GuarHullOper() {
  }

  public void processAction(TBAction a) {
  }

  public void runAlgorithm() {
    hullPolygon = null;
    bitangents = new DArray();
    simpleHull = null;
    bitanSet = null;
    EdDisc[] discs = UHullMain.getDiscs();

    for (int side = 0; side < 2; side++) {

      if (side == 1 && C.vb(UPPERONLY))
        break;

      // if second side, replace discs with rotated versions, and 
      // map them to their originals
      if (side == 1) {
        discMap = new HashMap();
        discs = HullUtil.transformDiscs(discs, discMap);
      }

      bitanSet = new BitanSet();
      bitanSet.setDebug(side == 0);
      bitanSet.construct(discs);
      {
        DArray dl = bitanSet.getDiscs();
        EdDisc prevDisc = null;
        for (int i = 0; i < dl.size(); i++) {
          EdDisc disc = (EdDisc) dl.get(i);
          if (side == 1)
            disc = (EdDisc) discMap.get(disc);
          if (prevDisc != null && prevDisc != disc)
            bitangents.add(new BiTangent(prevDisc, disc));
          prevDisc = disc;
        }
      }
      bitanSet = null;

      if (side == 0 && C.vb(PRINTENV)) {
        T.show(HullUtil.bitangentsString(bitangents), null, 0, 100, -1);
      }

    }
    if (!C.vb(UPPERONLY))
      hullPolygon = HullUtil.hullFromBiTangents(bitangents, null);

    if (C.vb(COMPARE) && hullPolygon != null) {
      EdPolygon simp = simpleHull();
      if (simp != null) {
        String diff = HullUtil.compareHulls(hullPolygon, simp);
        if (diff != null)
          T.err("Generated hull and simple version don't agree:\n" + diff);
      }
    }

  }

  /**
   * Generate hull polygon using simple, slow algorithm (if not already
   * generated)
   * @return hull polygon
   */
  private EdPolygon simpleHull() {
    if (simpleHull == null)
      simpleHull = HullUtil.build(UHullMain.getDiscs());
    return simpleHull;
  }

  public void paintView() {
    Editor.render();
    if (C.vb(PLOTSIMP)) {
      T.render(simpleHull(), MyColor.cLIGHTGRAY, STRK_THICK, -1);
    }
    if (C.vb(BITAN) || C.vb(UPPERONLY))
      T.render(bitangents, BiTangent.BITAN_COLOR, -1, -1);
    T.render(bitanSet);
    HullUtil.render(hullPolygon);
  }

  // set of bitangents for upper hull, ordered by polar angle
  private BitanSet bitanSet;
  // bitangents generated for both upper and lower hulls, in ccw order
  private DArray bitangents;

  // polygon generated from hull bitangents
  private EdPolygon hullPolygon;
  // polygon generated by simple, slow algorithm, for comparison purposes
  private EdPolygon simpleHull;

  // map of transformed=>original discs, for constructing lower hull
  private Map discMap;
}
